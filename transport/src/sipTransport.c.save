#include <sys/epoll.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <pthread.h>

#include "osDebug.h"
#include "osTimer.h"
#include "osMBuf.h"
#include "osConfig.h"
#include "osResourceMgmt.h"

#include "sipConfig.h"
#include "sipMsgFirstLine.h"
#include "sipUriparam.h"
#include "sipTransMgr.h"
//#include "sipTransportMgr.h"
#include "sipTransportIntf.h"
#include "sipTcm.h"


static __thread sipTpTcm_t sipTCM[SIP_CONFIG_TRANSPORT_MAX_TCP_PEER_NUM] = {};
static __thread uint8_t sipTcmMaxNum = 0;
static __thread sipTpQuarantine_t sipTpQList[SIP_CONFIG_TRANSPORT_MAX_TCP_PEER_NUM] = {};
static __thread uint8_t sipTpMaxQNum = 0;
static __thread sipTransportSetting_t tpSetting;
static __thread int udpFd=-1, tpEpFd=-1;

static void sipTpOnIpcMsg(osIPCMsg_t* pIpcMsg);
static osStatus_e sipTpSendTcp(void* pTrId, sipTransportInfo_t* pTpInfo, osMBuf_t* pSipBuf, sipTransportStatus_e* pTransport);
static osStatus_e sipTpCreateTcp(void* appId, sipTransportIpPort_t* peer, sipTransportIpPort_t* local, sipTpTcm_t* pTcm);
static sipTpTcm_t* sipTpGetTcm(struct sockaddr_in peer, bool isReseveOne);
static sipTpTcm_t* sipTpGetConnectedTcm(int tcpFd);
static osStatus_e sipTpDeleteTcm(int tcpfd);
static osStatus_e sipTpTcmAddUser(sipTpTcm_t* pTcm, void* pTrId);
static osStatus_e sipTpTcmUpdateConn(int tcpfd, bool isConnEstablished);
static bool sipTpIsInQList(struct sockaddr_in peer);
static bool sipTpSafeGuideMsg(osMBuf_t* sipBuf, size_t len);
static osMBuf_t* sipTpTcmBufInit(sipTpBuf_t* pTpBuf, bool isAllocSipBuf);
static void sipTpOnKATimeout(uint64_t timerId, void* ptr);
static void sipTpOnQTimeout(uint64_t timerId, void* ptr);
static ssize_t sipTpAnalyseMsg(sipTpBuf_t* pSipTpBuf, size_t chunkLen, size_t* pNextStart);
static osStatus_e sipTpConvertPLton(sipTransportIpPort_t* pIpPort, bool isIncPort, struct sockaddr_in* pSockAddr);
static void sipTpNotifyTcpConnUser(osListPlus_t* pList, sipTransMsgType_e msgType, void* pMsg);


void sipTransportStart(void* pData)
{
	struct sockaddr_in localAddr;
	struct epoll_event event, events[SYS_MAX_EPOLL_WAIT_EVENTS];

    sipTransportSetting_t tpSetting = *(sipTransportSetting_t*)pData;

    tpEpFd = epoll_create1(0);
    if(tpEpFd == -1)
    {
        logError("fails to create epoll file descriptor, errno=%d.\n", errno);
		goto EXIT;
    }

    event.events = EPOLLIN;
    event.data.fd = tpSetting.ownIPCfd;
    if(epoll_ctl(tpEpFd, EPOLL_CTL_ADD, tpSetting.ownIPCfd, &event))
    {
        logError("fails to add file descriptor (%d) to epoll(%d), errno=%d.\n", tpSetting.ownIPCfd, tpEpFd, errno);
		goto EXIT;
    }

    memset(&localAddr, 0, sizeof(localAddr));
//    memset(&peerAddr, 0, sizeof(peerAddr));

	if(sipTpConvertPLton(&tpSetting.local, true, &localAddr) != OS_STATUS_OK)
	{
		logError("fails to sipTpConvertPLton for udp, IP=%r, port=%d.", &tpSetting.local.ip, tpSetting.local.port);
    // Filling server information
//    localAddr.sin_family    = AF_INET; // IPv4
//    localAddr.sin_addr.s_addr = tpSetting.local.ip;
//    localAddr.sin_port = htons(tpSetting.local.port);
		goto EXIT;
	}

    if((udpFd = socket(AF_INET, SOCK_DGRAM | SOCK_NONBLOCK, 0)) < 0 ) 
	{ 
		logError("fails to create UDP socket.");
		goto EXIT;
    } 
      
    // Bind the socket with the server address 
    if(bind(udpFd, (const struct sockaddr *)&localAddr, sizeof(localAddr)) < 0 ) 
    { 
        logError("udpSocket bind fails, udpSocketfd=%d.", udpFd); 
		goto EXIT;
    } 

	//in transport layer, do not do UDP listening, neither we do TCP listening for the new connection, they are the responsible of com.  it only does ipc and tcp client connection listening.  whoever creates the tcp connection will add the connection fd to the tpEpFd. 
	ssize_t len;
	size_t bufLen;
	char* buffer;
	int event_count;
    size_t ipcMsgAddr;
    while (1)
    {
        event_count = epoll_wait(tpEpFd, events, SYS_MAX_EPOLL_WAIT_EVENTS, -1);
        for(int i = 0; i < event_count; i++) {
			if(events[i].data.fd == tpSetting.ownIPCfd)
			{
            	while (1)
            	{
                	len = read(events[i].data.fd, &ipcMsgAddr, sizeof(size_t));

                //printf("debug, subMgr, received n=%d\n", n);
                	if(len == -1 && (errno == EWOULDBLOCK || errno == EAGAIN))
					{
                    	//printf("EAGAIN received, n=%d, errno=%d, EWOULDBLOCK=%d, EAGAIN=%d\n", n, errno, EWOULDBLOCK, EAGAIN);
                    	break;
					}

					sipTpOnIpcMsg((osIPCMsg_t*)ipcMsgAddr);
				}
			}
			else
			{	
				if(events[i].events & EPOLLOUT)
				{
					if(events[i].events & EPOLLERR)
					{
						close(events[i].data.fd);	
						sipTpTcmUpdateConn(events[i].data.fd, false);
					}
					else
					{
                    	event.events = EPOLLIN | EPOLLRDHUP;
                    	event.data.fd = events[i].data.fd;
                    	epoll_ctl(tpEpFd, EPOLL_CTL_MOD, events[i].data.fd, &event);

						sipTpTcmUpdateConn(events[i].data.fd, true);
					}
					continue;
				}

				sipTpTcm_t* pTcm = sipTpGetConnectedTcm(events[i].data.fd);
				if(!pTcm)
				{
					logError("received a TCP message from tcpfd (%d) that does not have TCM.", events[i].data.fd);
					continue;
				}

				//pSipMsgBuf->pos = the end of processed received bytes 
				//pSipMsgBuf->end = the end of last received bytes
            	while (1) 
				{
                	buffer = &pTcm->tcpKeepAlive.sipBuf.pSipMsgBuf->buf[pTcm->tcpKeepAlive.sipBuf.pSipMsgBuf->end];
                	bufLen = pTcm->tcpKeepAlive.sipBuf.pSipMsgBuf->size - pTcm->tcpKeepAlive.sipBuf.pSipMsgBuf->end;
					if(bufLen == 0)
					{
						sipTpTcmBufInit(&pTcm->tcpKeepAlive.sipBuf, false);
						buffer = pTcm->tcpKeepAlive.sipBuf.pSipMsgBuf->buf;
						bufLen = pTcm->tcpKeepAlive.sipBuf.pSipMsgBuf->size;
					}

                	len = recv(events[i].data.fd, (char *)buffer, bufLen, MSG_DONTWAIT);

                	if(len == -1 && (errno == EWOULDBLOCK || errno == EAGAIN))
                	{
                    	debug("EAGAIN received\n");
                    	break;
                	}
					else if(len == 0 && (events[i].events & EPOLLRDHUP))
					{
						//close the fd
						debug("peer closed the TCP connection for tcpfd (%d).", events[i].data.fd);
						close(events[i].data.fd);
						sipTpDeleteTcm(events[i].data.fd);
						break;
					}	

					//basic sanity check to remove leading \r\n.  here we also ignore other invalid chars, 3261 only says \r\n
					if(pTcm->tcpKeepAlive.sipBuf.pSipMsgBuf->pos == 0 && (pTcm->tcpKeepAlive.sipBuf.pSipMsgBuf->buf[0] < 'A' || pTcm->tcpKeepAlive.sipBuf.pSipMsgBuf->buf[0] > 'Z'))
					{
						if(sipTpSafeGuideMsg(pTcm->tcpKeepAlive.sipBuf.pSipMsgBuf, len))
						{
							continue;
						}
					}
					size_t nextStart = 0;
					ssize_t remaining = sipTpAnalyseMsg(&pTcm->tcpKeepAlive.sipBuf, len, &nextStart);
					if(remaining < 0)
					{
						continue;
					}
					else
					{
						osMBuf_t* pCurSipBuf = pTcm->tcpKeepAlive.sipBuf.pSipMsgBuf;
						bool isBadMsg = pTcm->tcpKeepAlive.sipBuf.state.isBadMsg;	
						if(!sipTpTcmBufInit(&pTcm->tcpKeepAlive.sipBuf, isBadMsg ? false : true))
						{
							logError("fails to init a TCM pSipMsgBuf.");
							goto EXIT;
						}

						if(remaining > 0)
						{
							memcpy(pTcm->tcpKeepAlive.sipBuf.pSipMsgBuf->buf, &pCurSipBuf->buf[nextStart], remaining);
						}
						pTcm->tcpKeepAlive.sipBuf.pSipMsgBuf->end = remaining;
						pTcm->tcpKeepAlive.sipBuf.pSipMsgBuf->pos = 0;

						if(!isBadMsg)
						{
							pTcm->tcpKeepAlive.isUsed = true;
							sipTrans_onMsg(SIP_TRANS_MSG_TYPE_PEER, pCurSipBuf, 0);
						}
					}
				}
			}
        }
    }

EXIT:
	logError("a transport thread fails, exiting...");

	if(tpSetting.ownIPCfd >= 0)
	{
        close(tpSetting.ownIPCfd);
	}
	if(udpFd >= 0)
	{
        close(udpFd);
	}

    for(int i=0; i<sipTcmMaxNum; i++)
    {
        if(sipTCM[i].isUsing)
        {
			close(sipTCM[i].sockfd);
        }
	}

	if(tpEpFd >= 0)
	{
        close(tpEpFd);
	}
        
	exit(EXIT_FAILURE);
}


sipTransportStatus_e sipTransport_send(void* pTrId, sipTransportInfo_t* pTpInfo, osMBuf_t* pSipBuf)
{
	osStatus_e status = OS_STATUS_OK;
	sipTransportStatus_e tpStatus = SIP_TRANSPORT_STATUS_UDP;

	if(!pTpInfo || !pSipBuf)
	{
		logError("null pointer, pTpInfo=%p, pSipBuf=%p.", pTpInfo, pSipBuf);
		status = OS_ERROR_NULL_POINTER;
		goto EXIT;
	}

	ssize_t len;
	int sockfd;
	if(pTpInfo->tpType == SIP_TRANSPORT_TYPE_TCP && pTpInfo->tcpFd)
	{
		tpStatus = SIP_TRANSPORT_STATUS_TCP_OK;

		//use this fd
		len = write(pTpInfo->tcpFd, pSipBuf->buf, pSipBuf->end);
		if(len != 0 || len != pSipBuf->end)
		{
			logError("fails to send TCP out, fd=%d.", pTpInfo->tcpFd);
			status = OS_ERROR_NETWORK_FAILURE;
		}

        if(pTpInfo->viaProtocolPos != 0)
		{
			osMBuf_modifyStr(pSipBuf, "TCP", 3, pTpInfo->viaProtocolPos);
		}
		goto EXIT;
	}

	
    //check which transport protocol to use
    bool isUDP = true;
    switch(sipConfig_getTransport(&pTpInfo->peer.ip, pTpInfo->peer.port))
    {
        case SIP_TRANSPORT_TYPE_TCP:
            isUDP = false;
            break;
        case SIP_TRANSPORT_TYPE_ANY:
            if(pSipBuf->end > OS_TRANSPORT_MAX_MTU - OS_SIP_TRANSPORT_BUFFER_SIZE)
            {
                isUDP = false;
            }
            break;
        default:
            break;
    }

	if(isUDP)
	{
        tpStatus = SIP_TRANSPORT_TYPE_UDP;
        if(pTpInfo->viaProtocolPos != 0)
        {
            osMBuf_modifyStr(pSipBuf, "UDP", 3, pTpInfo->viaProtocolPos);
        }

	    struct sockaddr_in dest;
		status = sipTpConvertPLton(&pTpInfo->peer, true, &dest);
		if(status != OS_STATUS_OK)
		{
			logError("fails to perform sipTpConvertPLton.");
			goto EXIT;
		}

        len = sendto(udpFd, pSipBuf->buf, pSipBuf->end, 0, (const struct sockaddr*) &dest, sizeof(dest));
        if(len != pSipBuf->end || len == -1)
        {
            logError("fails to sendto() for udpFd=%d, len=%d, errno=%d.", udpFd, len, errno);
            status = OS_ERROR_NETWORK_FAILURE;
        }
	}
	else
	{
		status = sipTpSendTcp(pTrId, pTpInfo, pSipBuf, &tpStatus);
	}

EXIT:
	if(status != OS_STATUS_OK)
	{
		tpStatus = SIP_TRANSPORT_STATUS_FAIL;
	}

	return tpStatus;
}


static void sipTpOnKATimeout(uint64_t timerId, void* ptr)
{
	sipTpTcm_t* pTcm = ptr;

	if(pTcm->tcpKeepAlive.keepAliveTimerId != timerId)
	{
		logError("timeout, but the returned timerId (%ld) does not match the local timerId (%ld).", timerId, pTcm->tcpKeepAlive.keepAliveTimerId);
		return;
	}

	if(pTcm->tcpKeepAlive.isUsed)
	{
        pTcm->tcpKeepAlive.isUsed = false;
		pTcm->tcpKeepAlive.keepAliveTimerId = osStartTimer(SIP_CONFIG_TRANSPORT_MAX_TCP_CONN_ALIVE, sipTpOnKATimeout, pTcm);
	}
	else
	{	
		pTcm->isUsing = false;
	}
}
	

static void sipTpOnQTimeout(uint64_t timerId, void* ptr)
{
	sipTpQuarantine_t* pTpQ = ptr;
	if(!pTpQ)
	{
		logError("null pointer, ptr.");
		return;
	}

    if(pTpQ->qTimerId != timerId)
    {
        logError("timeout, but the returned timerId (%ld) does not match the local timerId (%ld).", timerId, pTpQ->qTimerId);
        return;
    }

	pTpQ->isUsing = false;
	pTpQ->qTimerId = 0;
}
	

static void sipTpOnIpcMsg(osIPCMsg_t* pIpcMsg)
{
	switch (pIpcMsg->interface)
	{
		case OS_TIMER_ALL:
			osTimerGetMsg(pIpcMsg->pMsg);
			break;
		default:
			logError("received ipc message from unknown interface (%d).", pIpcMsg->interface);
			break;
	}
}


//send a packet when transaction does not specify the sending fd	
static osStatus_e sipTpSendTcp(void* pTrId, sipTransportInfo_t* pTpInfo, osMBuf_t* pSipBuf, sipTransportStatus_e* pTransport)
{
	osStatus_e status = OS_STATUS_OK;
    int locValue;

	*pTransport = SIP_TRANSPORT_TYPE_TCP;
	
    struct sockaddr_in peer = {};
    struct sockaddr_in local = {};

    local.sin_family = AF_INET;
	//do not bind port, use ephemeral port.
	if(sipTpConvertPLton(&pTpInfo->local, false, &local) != OS_STATUS_OK)
	{
        logError("fails to sipTpConvertPLton for local IP=%r, errno=%d.", pTpInfo->local.ip, errno);
        status = OS_ERROR_INVALID_VALUE;
        goto EXIT;
    }

    if(sipTpConvertPLton(&pTpInfo->peer, true, &peer) != OS_STATUS_OK)
    {
        logError("fails to sipTpConvertPLton for peer IP=%r, errno=%d.", pTpInfo->peer.ip, errno);
        status = OS_ERROR_INVALID_VALUE;
        goto EXIT;
    }

	//first check if there is already a TCP connection exists
	sipTpTcm_t* pTcm = sipTpGetTcm(peer, true);
	if(!pTcm)
	{
		logError("fails to sipTpGetTcm for ip=%s, port=%d.", pTpInfo->peer.ip, pTpInfo->peer.port);
		status = OS_ERROR_SYSTEM_FAILURE;
		goto EXIT;
	}

	if(!pTcm->isUsing)
	{
		//check if the peer under quarantine
		if(sipTpIsInQList(peer))
		{
			*pTransport = SIP_TRANSPORT_STATUS_TCP_FAIL;
			goto EXIT;
		}

		status = sipTpCreateTcp(pTrId, &pTpInfo->peer, &pTpInfo->local, pTcm);
		pTcm->isTcpConnDone = true;
		*pTransport = SIP_TRANSPORT_STATUS_TCP_CONN; 
		goto EXIT;
	}

	if(pTcm->isTcpConnDone)
	{
		*pTransport = SIP_TRANSPORT_TYPE_TCP;

        if(pTpInfo->viaProtocolPos != 0)
        {
            osMBuf_modifyStr(pSipBuf, "TCP", 3, pTpInfo->viaProtocolPos);
        }

        int len = write(pTcm->sockfd, pSipBuf->buf, pSipBuf->end);
        if(len == 0 && len == pSipBuf->end)
        {
			//update the tcp connection's keep alive
            pTcm->tcpKeepAlive.isUsed = true;
        }
        else if(len == -1)
        {
			logError("write to peer fails, fd=%d, errno=%d.", pTcm->sockfd, errno);
            status = OS_ERROR_NETWORK_FAILURE;
        }
        else if(len != pSipBuf->end)
        {
            logError("write for tcpfd (%d) returns len (%d), the message len is %d, errno=%d.", pTcm->sockfd, len, pSipBuf->end, errno);
            status = OS_ERROR_NETWORK_FAILURE;
		}
	}
	else
	{
		sipTpTcmAddUser(pTcm, pTrId);
		*pTransport = SIP_TRANSPORT_STATUS_TCP_CONN;
	}

EXIT:
	return status;
}


static osStatus_e sipTpCreateTcp(void* appId, sipTransportIpPort_t* peer, sipTransportIpPort_t* local, sipTpTcm_t* pTcm)
{
	osStatus_e status = OS_STATUS_OK;
	int sockfd;

    if(sockfd = socket(AF_INET, SOCK_STREAM | SOCK_NONBLOCK, 0) < 0)
    {
        logError("could not open a TCP socket, errno=%d.", errno);
        status = OS_ERROR_NETWORK_FAILURE;
        goto EXIT;
    }

    struct sockaddr_in src;
    status = sipTpConvertPLton(local, false, &src);
	if(status != OS_STATUS_OK)
    {
        logError("fails to perform sipTpConvertPLton for local.");
		goto EXIT;
    }

    status = sipTpConvertPLton(peer, true, &pTcm->peer);
    if(status != OS_STATUS_OK)
    {
        logError("fails to perform sipTpConvertPLton for peer.");
        goto EXIT;
    }


    if(bind(sockfd, (const struct sockaddr *)&src, sizeof(src)) < 0 )
    {
		logError("fails to bind for sockfd (%d), localIP=%s, localPort=%r, errno=%d", sockfd, local->ip, local->port);
		close(sockfd);
		status = OS_ERROR_NETWORK_FAILURE;
        goto EXIT;
    }

    struct epoll_event event;
    event.events = EPOLLOUT;		//after connection is established, events will be changed to EPOLLIN
    event.data.fd = sockfd;
    epoll_ctl(tpEpFd, EPOLL_CTL_ADD, sockfd, &event);

    if(connect(sockfd, (struct sockaddr*)&pTcm->peer, sizeof(pTcm->peer)) != 0 ) 
	{
        if(errno != EINPROGRESS) 
		{
			logError("fails to connect() for peer ip=%r, port=%d.", peer->ip, peer->port);
			status = OS_ERROR_NETWORK_FAILURE;
			goto EXIT;
        }
    }

	pTcm->isUsing = true;
	pTcm->isTcpConnDone = false;
	pTcm->sockfd = sockfd;
	osListPlus_append(&pTcm->tcpConn.sipTrIdList, appId);
//	pTcm->tcpConn.tcpConnTimerId = osStartTimer(SIP_CONFIG_TRANSPORT_MAX_TCP_CONN_TIMEOUT, sipTransport_onTimeout, tcpMapElement);
	
EXIT:
	return status;
}


//isReserveOne=true will reserve a tcm if a matching is not found
static sipTpTcm_t* sipTpGetTcm(struct sockaddr_in peer, bool isReseveOne)
{
	sipTpTcm_t* pTcm = NULL;

#if 0
    struct sockaddr_in peer = {};

    peer.sin_port = htons(peerPort);
    if (inet_pton(AF_INET, peerIp, &peer.sin_addr.s_addr) == 0)
    {
        logError("inet_pton for peerIp=%s, errno=%d.", peerIp, errno);
        goto EXIT;
    }
#endif

	bool isMatch = false;
	for(int i=0; i<sipTcmMaxNum; i++)
	{
		if(!sipTCM[i].isUsing)
		{
			if(isReseveOne && !pTcm)
			{
				pTcm = &sipTCM[i];
			}
			continue;
		}

		if((sipTCM[i].peer.sin_port == peer.sin_port) && (sipTCM[i].peer.sin_addr.s_addr == peer.sin_addr.s_addr))
		{
			pTcm = &sipTCM[i];
			goto EXIT;
		}
	}

	if(!pTcm)
	{
		if(sipTcmMaxNum < SIP_CONFIG_TRANSPORT_MAX_TCP_PEER_NUM)
		{
			pTcm = &sipTCM[sipTcmMaxNum++];
		}
	}

EXIT:
	return pTcm;
}


static sipTpTcm_t* sipTpGetConnectedTcm(int tcpFd)
{
    sipTpTcm_t* pTcm = NULL;

    bool isMatch = false;
    for(int i=0; i<sipTcmMaxNum; i++)
    {
        if(!sipTCM[i].isUsing)
        {
			continue;
		}

        if(sipTCM[i].sockfd = tcpFd)
        {
            pTcm = &sipTCM[i];
            goto EXIT;
        }
    }

EXIT:
	return pTcm;
}	


static osStatus_e sipTpDeleteTcm(int tcpfd)
{
    osStatus_e status = OS_STATUS_OK;

    for(int i=0; i<sipTcmMaxNum; i++)
    {
        if(!sipTCM[i].isUsing)
        {
            continue;
        }

        if(sipTCM[i].sockfd = tcpfd)
        {
			sipTCM[i].isUsing = false;
			if(sipTCM[i].isTcpConnDone)
			{
				osStopTimer(sipTCM[i].tcpKeepAlive.keepAliveTimerId);
				sipTCM[i].tcpKeepAlive.keepAliveTimerId = 0;
				if(sipTCM[i].tcpKeepAlive.sipBuf.pSipMsgBuf)
				{
					osMBuf_dealloc(sipTCM[i].tcpKeepAlive.sipBuf.pSipMsgBuf);
					sipTCM[i].tcpKeepAlive.sipBuf.pSipMsgBuf = NULL;
				}
			}
			else
			{
				//do nothing, to-do, shall we notify tcp conn user?
			}
			sipTCM[i].sockfd = -1;

            goto EXIT;
        }
    }

    logError("fails to find a matching tcm, tcpfd = %d.", tcpfd);
    status = OS_ERROR_INVALID_VALUE;

EXIT:
    return status;
}


static osStatus_e sipTpTcmAddUser(sipTpTcm_t* pTcm, void* pTrId)
{
    osStatus_e status = OS_STATUS_OK;

	if(!pTcm->isUsing)
	{
		logError("try to add a user to a not using TCM.");
		status = OS_ERROR_INVALID_VALUE;
		goto EXIT;
	}

	if(pTcm->isTcpConnDone)
	{
        logError("try to add a user to a TCM that has established TCP connection.");
        status = OS_ERROR_INVALID_VALUE;
        goto EXIT;
    }

	osListPlus_append(&pTcm->tcpConn.sipTrIdList, pTrId);

EXIT:
	return status;
}


//update TCM conn status for a waiting for conn TCM
static osStatus_e sipTpTcmUpdateConn(int tcpfd, bool isConnEstablished)
{
	osStatus_e status = OS_STATUS_OK;

    for(int i=0; i<sipTcmMaxNum; i++)
    {
        if(!sipTCM[i].isUsing)
        {
			continue;
        }

        if(sipTCM[i].sockfd = tcpfd)
        {
			if(sipTCM[i].isTcpConnDone)
			{
				logError("try to update a TCP connection status for fd (%d), but tcm shows isTcpConnDone = true.", tcpfd);
				status = OS_ERROR_INVALID_VALUE;
				goto EXIT;
			}

			if(isConnEstablished)
			{
				sipTCM[i].isTcpConnDone = true;

				sipTransMsg_t sipTrMsg;
				sipTrMsg.sipMsgType = SIP_TRANS_MSG_CONTENT_TCP_READY;
				sipTrMsg.tcpReady.tcpFd = tcpfd;
				sipTpNotifyTcpConnUser(&sipTCM[i].tcpConn.sipTrIdList, SIP_TRANS_MSG_TYPE_TX_TCP_READY, &sipTrMsg);

				sipTCM[i].tcpKeepAlive.sipBuf.pSipMsgBuf = osMBuf_alloc(SIP_CONFIG_TRANSPORT_TCP_BUFFER_SIZE);
				sipTCM[i].tcpKeepAlive.keepAliveTimerId = osStartTimer(SIP_CONFIG_TRANSPORT_MAX_TCP_CONN_ALIVE, sipTpOnKATimeout, &sipTCM[i]);
			}
			else
			{
				sipTransMsg_t sipTrMsg;
                sipTpNotifyTcpConnUser(&sipTCM[i].tcpConn.sipTrIdList, SIP_TRANS_MSG_TYPE_TX_TCP_READY, &sipTrMsg);

            	sipTCM[i].isUsing = false;
            	sipTCM[i].sockfd = -1;

				//update quarantine list
				int i=0;
				for(i=0; i<sipTpMaxQNum; i++)
				{
					if(!sipTpQList[i].isUsing)
					{
						sipTpQList[i].isUsing = true;
						sipTpQList[i].peer = sipTCM[i].peer;
						sipTpQList[i].qTimerId = osStartTimer(SIP_CONFIG_TRANSPORT_TCP_CONN_QUARANTINE_TIME, sipTpOnQTimeout, &sipTpQList[i]);
						break;
					}
				}

				if( i == sipTpMaxQNum)
				{
					if(sipTpMaxQNum < SIP_CONFIG_TRANSPORT_MAX_TCP_PEER_NUM)
					{
                        sipTpQList[i].isUsing = true;
                        sipTpQList[i].peer = sipTCM[i].peer;
                        sipTpQList[i].qTimerId = osStartTimer(SIP_CONFIG_TRANSPORT_TCP_CONN_QUARANTINE_TIME, sipTpOnQTimeout, &sipTpQList[i]);
						sipTpMaxQNum++;
					}
					else
					{
						logError("maximum number of qNum (%d) exceeds SIP_CONFIG_TRANSPORT_MAX_TCP_PEER_NUM.", sipTpMaxQNum);
					}
				}
			}

            goto EXIT;
        }
	}
	
	logError("fails to find a matching tcm, tcpfd = %d.", tcpfd);
	status = OS_ERROR_INVALID_VALUE;

EXIT:
	return status;
}


static bool sipTpIsInQList(struct sockaddr_in peer)
{
	bool isFound = false;

	for(int i=0; i<sipTpMaxQNum; i++)
	{
    	if(!sipTpQList[i].isUsing)
		{
			continue;
		}

		if((sipTpQList[i].peer.sin_port == peer.sin_port) && (sipTpQList[i].peer.sin_addr.s_addr == peer.sin_addr.s_addr))
		{
			isFound = true;
			break;
		}
	}

	return isFound;
}


/*extract Content-Length and EOM from a newly received message piece
  pSipMsgBuf_pos = end of bytes processed. 
  pSipMsgBuf->end = end of bytes received, except when a sip packet is found, which pSipMsgBuf->end = end of the sip packet
  if a sip packet does not contain Content-Length header, assume Content length = 0
  return value: -1: expect more read() for the current  sip packet, 0: exact sip packet, >1 bytes for next sip packet.
 */
static ssize_t sipTpAnalyseMsg(sipTpBuf_t* pSipTpBuf, size_t chunkLen, size_t* pNextStart)
{
	sipTpMsgState_t msgState = pSipTpBuf->state;
	osMBuf_t* pSipMsg = pSipTpBuf->pSipMsgBuf;
    pSipMsg->end += chunkLen;

    ssize_t remaining = -1;
	*pNextStart = 0;

	//first check if is waiting for content
	if(msgState.clValue > 0)
	{
		if(chunkLen >= msgState.clValue)
		{
			//the received bytes more than content length
			pSipMsg->pos += msgState.clValue;
			pSipMsg->end = pSipMsg->pos;
			for (int i=0; i<chunkLen-msgState.clValue; i++)
			{
				if(pSipMsg->buf[pSipMsg->end+i] >= 'A' && pSipMsg->buf[pSipMsg->end+i] <= 'Z')
				{
					*pNextStart = pSipMsg->end+i;
					remaining = chunkLen - msgState.clValue - i - 1;
					goto EXIT;
				}
			}

			*pNextStart = pSipMsg->end+chunkLen;
			remaining = 0;
			goto EXIT;
		}
		else
		{
			//the received bytes less than the content length
            msgState.clValue -= chunkLen;
			pSipMsg->pos = pSipMsg->end;
		
			goto EXIT;
		}
	}

	//check content-length and end of headers in the sip message header part
	for(int i=pSipMsg->pos; i<pSipMsg->end; i++)
	{
		switch(pSipMsg->buf[i])
		{
			case '\r':
				if(pSipTpBuf->state.eomPattern == SIP_TRANSPORT_EOM_OTHER)
				{
					pSipTpBuf->state.eomPattern = SIP_TRANSPORT_EOM_R;
				}
				else if(pSipTpBuf->state.eomPattern == SIP_TRANSPORT_EOM_RN)
				{
					pSipTpBuf->state.eomPattern = SIP_TRANSPORT_EOM_RNR;
				}
				else
				{
					logError("received two continuous CR.");
					msgState.isBadMsg = true;
					pSipTpBuf->state.eomPattern == SIP_TRANSPORT_EOM_OTHER;
				}
				break;
			case '\n':
                if(pSipTpBuf->state.eomPattern == SIP_TRANSPORT_EOM_R)
                {
                    pSipTpBuf->state.eomPattern = SIP_TRANSPORT_EOM_RN;
                }
                else if(pSipTpBuf->state.eomPattern == SIP_TRANSPORT_EOM_RNR)
                {
                    pSipTpBuf->state.eomPattern = SIP_TRANSPORT_EOM_RNRN;
					remaining = chunkLen + pSipMsg->pos - i - 1;
					if(msgState.clValue <= 0)
					{
						msgState.clValue = 0;
						pSipMsg->pos = i+1;
						pSipMsg->end = pSipMsg->pos;
						*pNextStart = pSipMsg->end;
						goto EXIT;
					}
					else
					{
						//the remaining bytes more than content length
						if(remaining >= msgState.clValue)
						{
							pSipMsg->pos = i + 1 + msgState.clValue;
							pSipMsg->end = pSipMsg->pos;
							remaining -= msgState.clValue;
            				for (int j=0; j<remaining; j++)
            				{
                				if(pSipMsg->buf[pSipMsg->end+j] >= 'A' && pSipMsg->buf[pSipMsg->end+j] <= 'Z')
                				{
                    				*pNextStart = pSipMsg->end+j;
									remaining -= j;
									goto EXIT;
								}
							}
							remaining = 0;
							goto EXIT;
						}
						else
						{
							//the remaining bytes less than content length
							msgState.clValue -= remaining;
							pSipMsg->pos = pSipMsg->end;
							goto EXIT;
						}
					}	
                }
                else
                {
                    logError("received a LF but there in no preceeding CR.");
					msgState.isBadMsg = true;
                    pSipTpBuf->state.eomPattern == SIP_TRANSPORT_EOM_OTHER;
                }
                break;
			case 'C':
			{
				//if content-value has already been identified, or not a beginning of a header, bypass
				if(msgState.clValue >= 0 || pSipTpBuf->state.eomPattern != SIP_TRANSPORT_EOM_RN)
				{
	                pSipTpBuf->state.eomPattern = SIP_TRANSPORT_EOM_OTHER;
					break;
				}

				pSipTpBuf->state.eomPattern = SIP_TRANSPORT_EOM_OTHER;

				//if the remaining message is not big enough to contain "Content-Length"
				if(i+14 >= pSipMsg->end)
				{
					pSipTpBuf->state.eomPattern = SIP_TRANSPORT_EOM_RN;
					pSipMsg->pos = i;
					goto EXIT;
				}

				//if the remaining message is big enough to contain "Content-Length", but this header is not a Content-Lenth header
				if(pSipMsg->buf[i+9] != 'e')
				{
					break;
				}

				//a potential Content-Length candidate	
				char* cl="ontent-Length";
				for(int j=1; j<14; j++)
				{	
					if(pSipMsg->buf[i+j] != cl[j-1])
					{
						break;
					}
				}

				//has found the Content-Length header, next step is to get the cl value
				//clValueState=-1, right after content-header name, clValueState=0, right after ':', clValueState>0, cl value is found
				int clValueState = -1;
				int j;
				for(j= i+14; j<pSipMsg->end; j++)
				{
					if(pSipMsg->buf[j] == ' ' || pSipMsg->buf[j] == '\t')
					{
						if(clValueState > 0)
						{
							break;
						}
						continue;
					}
					else if(pSipMsg->buf[j] == ':')
					{
						clValueState = 0;
					}
					else if(pSipMsg->buf[j] == '\r' && msgState.clValue >= 0)
					{
						clValueState = 0;
						j--;
						break;
					}
					else if(pSipMsg->buf[j] >= '0' && pSipMsg->buf[j] <= '9')
					{
						if(msgState.clValue == -1)
						{
							clValueState = j;
							msgState.clValue = 0;
						}
						msgState.clValue = msgState.clValue*10 + (pSipMsg->buf[j] - '0');
					}
					else
					{
						//the content-length header value contains no digit char, pretend this is not a content-length header, the message will be discarded later when no content-length header is found
						msgState.isBadMsg = true;
						break;
					}
				}
						
				//if there is no break out from the above "for(j= i+14; j<end; j++)" loop, means the CL header will be continued in the next read(), retrieve to the beginning of CL header 
				if(j == pSipMsg->end)
				{
					pSipMsg->pos = i;
					pSipTpBuf->state.eomPattern = SIP_TRANSPORT_EOM_RN;
				}
				else
				{
					//next iteration starts from j
					i = j;
				}

				break;
			}
			default:
				pSipTpBuf->state.eomPattern = SIP_TRANSPORT_EOM_OTHER;
				break;
		}
	}

EXIT:
    //buf is full, but still not found the end of a sip packet, treat this as a bad packet.
    if(remaining == -1 && pSipMsg->end == pSipMsg->size)
	{
		remaining == 0;
		pSipTpBuf->state.isBadMsg = true;
	}

	return remaining;
}
		 

//return value: true: discard msg, false, keep msg
static bool sipTpSafeGuideMsg(osMBuf_t* sipBuf, size_t len)
{
	if(sipBuf->pos != 0 || (sipBuf->buf[0] >= 'A' && sipBuf->buf[0] <= 'Z'))
	{
		return false;
	}

	int i;
	for (int i=0; i<len; i++)
	{
		if(sipBuf->buf[i] >= 'A' && sipBuf->buf[i] <= 'Z')
		{
			memmove(sipBuf->buf, &sipBuf->buf[i], len-i);
			sipBuf->pos = len-i;
			return false;
		}
	}

	return true;
}


static osMBuf_t* sipTpTcmBufInit(sipTpBuf_t* pTpBuf, bool isAllocSipBuf)
{
	pTpBuf->state.eomPattern = SIP_TRANSPORT_EOM_OTHER;
	pTpBuf->state.clValue = -1;
	pTpBuf->state.isBadMsg = false;

	if(isAllocSipBuf)
	{
		pTpBuf->pSipMsgBuf = osMBuf_alloc(SIP_CONFIG_TRANSPORT_TCP_BUFFER_SIZE);
	}

	return pTpBuf->pSipMsgBuf;
}


static osStatus_e sipTpConvertPLton(sipTransportIpPort_t* pIpPort, bool isIncPort, struct sockaddr_in* pSockAddr)
{ 
	osStatus_e status = OS_STATUS_OK;
    char ip[16];

    pSockAddr->sin_family = AF_INET;
	if(isIncPort)
	{
    	pSockAddr->sin_port = htons(pIpPort->port);
	}
	else
	{
		pSockAddr->sin_port = 0;
	}

    if(osPL_strcpy(&pIpPort->ip, ip, 16) != 0)
    {
        logError("fails to perform osPL_strcpy for IP(%r).", pIpPort->ip);
		status = OS_ERROR_INVALID_VALUE;
		goto EXIT;
	}

    if(inet_pton(AF_INET, ip, &pSockAddr->sin_addr.s_addr) != 0)
    {
        logError("fails to perform inet_pton for IP(%s).", ip);
        status = OS_ERROR_INVALID_VALUE;
		goto EXIT;
    }

EXIT:
	return status;
}


void sipTpNotifyTcpConnUser(osListPlus_t* pList, sipTransMsgType_e msgType, void* pMsg)
{
	if(pList->first)
	{
		((sipTransMsg_t*) pMsg)->pTransId = pList->first;
		sipTrans_onMsg(msgType, pMsg, 0);
	}

	if(pList->num > 1)
	{
		osListElement_t* pLE = pList->more.head;
		while(pLE)
		{
			((sipTransMsg_t*) pMsg)->pTransId = pLE->data;
	        sipTrans_onMsg(msgType, pMsg, 0);
			pLE = pLE->next;
		}
	}

	osListPlus_clear(pList);
}


#if 0
static osStatus_e sipTransportCreateTCP(char* serverIP, int port)
{
    if ( (sockfd = socket(AF_INET, SOCK_STREAM|SOCK_NONBLOCK, 0)) < 0 ) {
        perror("Socket");
        exit(errno);
    }

    /*---Add socket to epoll---*/
    int epfd = epoll_create(1);
    struct epoll_event event;
    event.events = EPOLLIN; // Cann append "|EPOLLOUT" for write events as well
    event.data.fd = sockfd;
    epoll_ctl(epfd, EPOLL_CTL_ADD, sockfd, &event);

    /*---Initialize server address/port struct---*/
    bzero(&dest, sizeof(dest));
    dest.sin_family = AF_INET;
    dest.sin_port = htons(PORT);
    if ( inet_pton(AF_INET, SERVER, &dest.sin_addr.s_addr) == 0 ) {
        perror(SERVER);
        exit(errno);
    }

    /*---Connect to server---*/
    if ( connect(sockfd, (struct sockaddr*)&dest, sizeof(dest)) != 0 ) {
        if(errno != EINPROGRESS) {
            perror("Connect ");
            exit(errno);
        }
    }

    /*---Wait for socket connect to complete---*/
    num_ready = epoll_wait(epfd, events, MAX_EPOLL_EVENTS, 1000/*timeout*/);
    for(i = 0; i < num_ready; i++) {
        if(events[i].events & EPOLLIN) {
            printf("Socket %d connected\n", events[i].data.fd);
        }
    }
#endif	
